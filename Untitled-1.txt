
public class EarthSpinScript : MonoBehaviour
{


    // public float rotationSpeed = 800.0f;

    // private void Start()
    // {
    //     Observable.EveryUpdate()
    //         .SkipUntil(this.OnMouseDownAsObservable())
    //         .Select(_ => new Vector2(Input.GetAxis("Mouse X"), Input.GetAxis("Mouse Y")))
    //         .TakeUntil(this.OnMouseUpAsObservable())
    //         .Repeat()
    //         .Subscribe(move =>
    //         {
    //             this.transform.rotation = Quaternion.AngleAxis(move.y * rotationSpeed * Time.deltaTime, Vector3.right) * Quaternion.AngleAxis(-move.x * rotationSpeed * Time.deltaTime, Vector3.up) * transform.rotation;
    //         });

    // }


    // public void OnClickToMove()
    // {

    // }


    void Update()
    {

        //     if (Input.GetMouseButtonDown(0))
        //     {
        //         resultTarget = null;
        //         moveActive = true;

        //         float getMouseXPosition = Input.mousePosition.y - windowHalfY;
        //         float getMouseYPosition = Input.mousePosition.x - windowHalfX;

        //         mouseXOnMouseDown = getMouseXPosition;
        //         mouseYOnMouseDown = getMouseYPosition;


        //         Quaternion changeGlobeEuler = Quaternion.Inverse(globe.rotation);

        //         targetRotationX = transRotX = globe.eulerAngles.x;
        //         targetRotationY = transRotY = changeGlobeEuler.eulerAngles.y;
        //         transRotZ = globe.eulerAngles.z;

        //         targetRotationOnMouseDownX = targetRotationX;
        //         targetRotationOnMouseDownY = targetRotationY;

        //     }
        //     else if (Input.GetMouseButtonUp(0))
        //     {
        //         moveActive = false;
        //     }

        //     if (Input.GetMouseButton(0))
        //     {
        //         if (moveActive)
        //         {
        //             float getMouseXPosition = Input.mousePosition.y - windowHalfY;
        //             float getMouseYPosition = Input.mousePosition.x - windowHalfX;

        //             targetRotationX = (targetRotationOnMouseDownX + (getMouseXPosition - mouseXOnMouseDown) * 0.8f);
        //             targetRotationY = (targetRotationOnMouseDownY + (getMouseYPosition - mouseYOnMouseDown) * 0.8f);

        //             //
        //         }
        //     }




        //     // transRotX = Mathf.Clamp(transRotX, -22f, 22f);
        //     float threshold = (targetRotationY - transRotY) * 0.03f;
        //     transRotX += (targetRotationX - transRotX) * 0.03f;
        //     transRotY += threshold;

        //     //  Debug.DrawRay(Camera.main.transform.position, transform.TransformDirection(Vector3.forward) * 10, Color.yellow);

        //     //터치후 일정 임계점 이하이면 가까운 거리로 이동 
        //     if (threshold >= -0.4 && threshold <= 0.4)
        //     {
        //         if (!moveActive)
        //         {


        //             // To do : 레이로 검출되었을떄 
        //             // if (Physics.Raycast(Camera.main.transform.position, Camera.main.transform.forward, out hit, 10))
        //             // {

        //             //     if (!resultTarget)
        //             //     {
        //             //         resultTarget = hit.transform;
        //             //         setSelectSite();
        //             //         Debug.Log("레이로 검출 : " + hit.transform.gameObject.name);
        //             //     }
        //             // }
        //             // else
        //             // {
        //             // To do : 레이로 검출 안되었을때 거리가 가장 가까운 collider 선택

        //             if (!resultTarget)
        //             {
        //                 float isNearDistance = 100f;
        //                 int selectSite = 0;

        //                 for (int i = 0; i < site.Length; i++)
        //                 {
        //                     float dist = Vector3.Distance(Camera.main.transform.position, site[i].transform.position);
        //                     if (isNearDistance > dist)
        //                     {
        //                         isNearDistance = dist;
        //                         selectSite = i;
        //                     }
        //                 }

        //                 resultTarget = site[selectSite];

        //                 setSelectSite();
        //                 Debug.Log("레이로 미검출한 가장 가까운 Site" + selectSite + ": " + isNearDistance);
        //             }
        //             else
        //             {
        //                 globe.rotation = Quaternion.Slerp(globe.rotation, toCamera * fromSite, Time.deltaTime * 5); ;
        //             }
        //             //}





        //         }
        //     }

        //     //터치 드레그시 회전
        //     else
        //     {

        //         // var rotation = Quaternion.Euler(0, -transRotY, 0);
        //         var rotation = Quaternion.Euler(transRotX, -transRotY, transRotZ);
        //         globe.rotation = rotation;

        //     }

        // }

        // //자동 이동시 가까운 사이트 획득후 설정 
        // void setSelectSite()
        // {
        //     toCamera = Quaternion.LookRotation(Camera.main.transform.position - globe.position);
        //     toSite = Quaternion.LookRotation(resultTarget.localPosition);
        //     fromSite = Quaternion.Inverse(toSite);
        // }
    }
}
